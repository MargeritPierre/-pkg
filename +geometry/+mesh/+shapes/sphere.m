function mesh = sphere(dx)
% Surfacic mesh reprezenting a unit sphere

% Compute the sphere subdivision
if nargin==0
    nSubDiv = 3 ; % default (1280 elements)
else
    % final number of elements: n = 20*(4^nSubDiv)
    % unit sphere area: A = 4/3*pi
    targetTriArea = .25*sqrt(3)*dx^2 ; % area of the equilateral triangle with side dx
    targetNTri = 4/3*pi/targetTriArea ; % target number of triangles
    nSubDiv = round(log(targetNTri/20)/log(4)) ; 
end


% Initial icosahedron
% see https://danielsieger.com/blog/2021/01/03/generating-platonic-solids.html
    phi = .5*(1+sqrt(5)) ;
    a = 1 ; 
    b = 1/phi ;
    vtx = [...
            0 b -a ; ...
            b a 0 ; ...
            -b a 0 ; ...
            0 b a ; ...
            0 -b a ; ...
            -a 0 b ; ...
            0 -b -a ; ...
            a 0 -b ; ...
            a 0 b ; ...
            -a 0 -b ; ...
            b -a 0 ; ...
            -b -a 0 ; ...
          ] ;
    elm = [...
            3 2 1 ; ...
            2 3 4 ; ...
            6 5 4 ; ...
            5 9 4 ; ...
            8 7 1 ; ...
            7 10 1 ; ...
            12 11 5 ; ...
            11 12 7 ; ...
            10 6 3 ; ...
            6 10 12 ; ...
            9 8 2 ; ...
            8 9 11 ; ...
            3 6 4 ; ...
            9 2 4 ; ...
            10 3 1 ; ...
            2 8 1 ; ...
            12 10 7 ; ...
            8 11 7 ; ...
            6 12 5 ; ...
            11 9 5 ; ...
          ] ;
    mesh = pkg.geometry.mesh.Mesh('Nodes',vtx,'Elems',elm) ;
    mesh.Elems.Types = pkg.geometry.mesh.elements.base.Triangle ;
    
% Subdivision
    for ss = 1:nSubDiv
    % Make 4 triangles with the edge mid points
        elnod = mesh.Elems.NodeIdx ;
        edgnod = pkg.data.sparse2list(mesh.ElemEdges')+mesh.nNodes ;
        mesh.Nodes = [mesh.Nodes ; mesh.centroid(mesh.Edges)] ;
        mesh.Elems.NodeIdx = [edgnod ; elnod(:) edgnod(:) reshape(circshift(edgnod,1,2),[],1)] ;
    % Project to the unit sphere
        mesh.Nodes = mesh.Nodes./sqrt(sum(mesh.Nodes.^2,2)) ;
    end

end

