classdef Tetrahedron < pkg.geometry.mesh.elements.base.BaseElement
%TETRAHEDRON 3D simplex with 4 nodes

%% (MANDATORY) ELEMENT DEFINITION
% ELEMENT GEOMETRY
    properties (SetAccess = protected)
        % Node local Coordinates [nNodes nDims]
        NodeLocalCoordinates = [0 0 0 ; 1 0 0 ; 0 1 0 ; 0 0 1]
        % The list of faces [nFaces 3]
        Faces
        % The list of edges [nEdges 2] 
        Edges
    end
    
% SHAPE FUNCTIONS AND DERIVATIVES
    methods
        % Evaluate the shape functions matrix N at local coordinates E
        % So that f(E) = N*f_nodes
        % E = [nE nDims] , N = [nE nNodes]
        function N = evalAt(~,E)
            N = [1-E(:,1)-E(:,2)-E(:,3) E(:,1) E(:,2) E(:,3)] ;
        end
        
        function DER = evalDerivativeAt(this,E,ORD,~)
        % Evaluate the partial derivatives of order ORD = [o1 o2 ...] (:[1 nDims]) of 
        % shape functions at given local coordinates E:[nRows nDims]
        % exemple: df(E)/(dx²dy) = DER(E,[2 1 0]) ;
            if nargin<3 ; ORD = [1 0 0] ; end
            if numel(ORD)~=3 ; error('Wrong derivation order argument (must be [1 nDims])') ; end
            if all(ORD==0) % No Derivative
                DER = this.evalAt(E) ;
            elseif sum(ORD)>1 % High-order derivatives vanish
                DER = zeros(size(E,1),this.nNodes) ;
            else % Valid derivatives
                if isequal(ORD,[1 0 0])
                    DER = ones(size(E,1),1).*[-1 1 0 0] ;
                elseif isequal(ORD,[0 1 0])
                    DER = ones(size(E,1),1).*[-1 0 1 0] ;
                elseif isequal(ORD,[0 0 1])
                    DER = ones(size(E,1),1).*[-1 0 0 1] ;
                end
            end
        end
    end
    
% INTEGRATION QUADRATURE
    properties
        GaussIntegrationPoints = [1/4 1/4 1/4] % [nGaussIntPts nDims]
        GaussIntegrationWeights = 1/6 % [nGaussIntPts 1]
    end
    
%% CONSTRUCTOR / DESTRUCTOR
    methods
        function this = Tetrahedron(varargin)
        % Constructor
            this.Edges = pkg.geometry.mesh.elements.ElementTable('Types',pkg.geometry.mesh.elements.base.Bar...
                                                            ,'Indices',[1 1 2 ; 1 2 3 ; 1 3 1 ; 1 1 4 ; 1 2 4 ; 1 3 4]) ;
            this.Faces = pkg.geometry.mesh.elements.ElementTable('Types',pkg.geometry.mesh.elements.base.Triangle...
                                                            ,'Indices',[1 1 3 2 ; 1 1 2 4 ; 1 2 3 4 ; 1 3 1 4]) ;
        end

        function delete(this)
        % Destructor
        end
    end

    
%% MARCHING SLICE CASES (OVERLOAD)
methods
    
    function S = reducedSliceCases(this)   
    % Return all the cases that have to be tested while slicing this
    % element
    % !!!! THE CASES WHERE the signed boolean is 0 are not handled !!!!
    % So this reduces to 16 slice cases
    % S is an array of structures with fields:
    %   - Test: signed boolean configuration [1 this.nNodes]
    %           (-1 inside, 1 outside, NaN any cases)
    %   - IN: elements inside (pkg.geometry.mesh.elements.ElementTable)
    %   - ON: elements on the slice (pkg.geometry.mesh.elements.ElementTable)
    %   - OUT: elements outside (pkg.geometry.mesh.elements.ElementTable)
    % in the ElementTables, NodeIdx>this.nNodes denote edges indices
    % (used when the slice crosses an edge)    
    % ON.Faces's normals MUST BE ORIENTED OUTSIDE
        warning('in the tetrahedron reducedSliceCases fcn');
        import pkg.geometry.mesh.elements.ElementTable
        import pkg.geometry.mesh.elements.base.*
        complex2ind = @(ii) real(ii) + imag(ii) + double(logical(imag(ii)))*this.nNodes ;
        eltbl = @(type,ii) ElementTable('Types',type,'Indices',padarray(complex2ind(ii),[0 1],1,'pre')) ;
        S = repmat(struct('Test',[],'IN',[],'ON',[],'OUT',[]),[0 0]) ; % empty slice structure
    % All Nodes OUT
        S(end+1).Test = [1 1 1 1] ;
        S(end).OUT = eltbl(this,1:this.nNodes) ;
    % All Nodes IN
        S(end+1).Test = -[1 1 1 1] ;
        S(end).IN = eltbl(this,1:this.nNodes) ;
    % One Node IN
        S(end+1).Test = [-1 1 1 1] ;
            S(end).IN = eltbl(this,[1 1i 3i 4i]) ;
            S(end).OUT = eltbl(Prism,[1i 3i 4i 2 3 4]) ;
            S(end).ON = eltbl(Triangle,[1i 3i 4i]) ;
        S(end+1).Test = [1 -1 1 1] ;
            S(end).IN = eltbl(this,[2 1i 5i 2i]) ;
            S(end).OUT = eltbl(Prism,[1i 5i 2i 1 4 3]) ;
            S(end).ON = eltbl(Triangle,[1i 5i 2i]) ;
        S(end+1).Test = [1 1 -1 1] ;
            S(end).IN = eltbl(this,[3 2i 6i 3i]) ;
            S(end).OUT = eltbl(Prism,[2i 6i 3i 2 4 1]) ;
            S(end).ON = eltbl(Triangle,[2i 6i 3i]) ;
        S(end+1).Test = [1 1 1 -1] ;
            S(end).IN = eltbl(this,[4 4i 6i 5i]) ;
            S(end).OUT = eltbl(Prism,[4i 6i 5i 1 3 2]) ;
            S(end).ON = eltbl(Triangle,[4i 6i 5i]) ;
    % One Node OUT
        S(end+1).Test = [1 -1 -1 -1] ;
            S(end).OUT = eltbl(this,[1 1i 3i 4i]) ;
            S(end).IN = eltbl(Prism,[1i 3i 4i 2 3 4]) ;
            S(end).ON = eltbl(Triangle,[1i 4i 3i]) ;
        S(end+1).Test = [-1 1 -1 -1] ;
            S(end).OUT = eltbl(this,[2 1i 5i 2i]) ;
            S(end).IN = eltbl(Prism,[1i 5i 2i 1 4 3]) ;
            S(end).ON = eltbl(Triangle,[1i 2i 5i]) ;
        S(end+1).Test = [-1 -1 1 -1] ;
            S(end).OUT = eltbl(this,[3 2i 6i 3i]) ;
            S(end).IN = eltbl(Prism,[2i 6i 3i 2 4 1]) ;
            S(end).ON = eltbl(Triangle,[2i 3i 6i]) ;
        S(end+1).Test = [-1 -1 -1 1] ;
            S(end).OUT = eltbl(this,[4 4i 6i 5i]) ;
            S(end).IN = eltbl(Prism,[4i 6i 5i 1 3 2]) ;
            S(end).ON = eltbl(Triangle,[4i 5i 6i]) ;
    % Two Node IN
        S(end+1).Test = [-1 -1 1 1] ;
            S(end).IN = eltbl(Prism,[1 3i 4i 2 2i 5i]) ;
            S(end).OUT = eltbl(Prism,[4 5i 4i 3 2i 3i]) ;
            S(end).ON = eltbl(Quadrangle,[4i 5i 2i 3i]) ;
        S(end+1).Test = [-1 1 -1 1] ;
            S(end).IN = eltbl(Prism,[1 4i 1i 3 6i 2i]) ;
%             S(end).OUT = eltbl(Prism,[4 5i 4i 3 2i 3i]) ;
            S(end).ON = eltbl(Quadrangle,[1i 2i 6i 4i]) ;
        S(end+1).Test = [-1 1 1 -1] ;
            S(end).IN = eltbl(Prism,[1 1i 3i 4 5i 6i]) ;
%             S(end).OUT = eltbl(Prism,[4 5i 4i 3 2i 3i]) ;
            S(end).ON = eltbl(Quadrangle,[1i 3i 6i 5i]) ;
        S(end+1).Test = [1 -1 -1 1] ;
            S(end).IN = eltbl(Prism,[2 1i 5i 3 3i]) ;
%             S(end).OUT = eltbl(Prism,[4 5i 4i 3 2i 3i]) ;
            S(end).ON = eltbl(Quadrangle,[1i 5i 6i 3i]) ;
        S(end+1).Test = [1 -1 1 -1] ;
%             S(end).IN = eltbl(Prism,[1 3i 4i 2 2i 5i]) ;
%             S(end).OUT = eltbl(Prism,[4 5i 4i 3 2i 3i]) ;
            S(end).ON = eltbl(Quadrangle,[1i 4i 6i 2i]) ;
        S(end+1).Test = [1 1 -1 -1] ;
%             S(end).IN = eltbl(Prism,[1 3i 4i 2 2i 5i]) ;
%             S(end).OUT = eltbl(Prism,[4 5i 4i 3 2i 3i]) ;
            S(end).ON = eltbl(Quadrangle,[5i 4i 3i 2i]) ;
    end
    
    function S = sliceCases(this)
    % Return all the cases that have to be tested while slicing this
    % element
    % S is an array of structures with fields:
    %   - Test: signed boolean configuration [1 this.nNodes]
    %           (-1 inside, 0 on, 1 outside, NaN any cases)
    %   - IN: elements inside (pkg.geometry.mesh.elements.ElementTable)
    %   - ON: elements on the slice (pkg.geometry.mesh.elements.ElementTable)
    %   - OUT: elements outside (pkg.geometry.mesh.elements.ElementTable)
    % in the ElementTables, NodeIdx>this.nNodes denote edges indices
    % (used when the slice crosses an edge)     
        S = reducedSliceCases(this) ; return ;
        warning('in the tetrahedron sliceCases fcn');
        import pkg.geometry.mesh.elements.ElementTable
        import pkg.geometry.mesh.elements.base.*
        eltbl = @(type,ii) ElementTable('Types',type,'Indices',padarray(ii,[0 1],1,'pre')) ;
    % Create all possible combinations (81 tests for a tetrahedron...)
        tests = pkg.math.combinations(repmat({[-1,0,1]},[this.nNodes 1])) ;
        S = repmat(struct('Test',[],'IN',[],'ON',[],'OUT',[]),[size(tests,1) 1]) ; % empty structure
    % Inject tests in the structure
        testsCells = num2cell(tests,2) ;
        [S(1:numel(testsCells)).Test] = deal(testsCells{:}) ;
    % When all nodes lie on the same (inclusive) side of the levelset
        elem = eltbl(this,1:this.nNodes) ;
        [S(all(ismember(tests,[-1 0]),2) & ~all(tests==0,2)).IN] = deal(elem) ; % all in or on (15 cases)
        [S(all(ismember(tests,[1 0]),2) & ~all(tests==0,2)).OUT] = deal(elem) ; % all out or on (15 cases)
        [S(all(tests==0,2)).ON] = deal(elem) ; % all on (1 case)
    % When one node only is on an opposite side of the levelset
        oneNodeOut = (range(tests,2)==2) & (sum(tests==1,2)==1) & all(tests~=0,2)
    % Display infos
        nonEmptyCase = arrayfun(@(s)(~isempty(s.IN) || ~isempty(s.ON) || ~isempty(s.OUT)),S) ;
        warning(['number of non-empty cases: ' num2str(sum(nonEmptyCase)) '/' num2str(size(tests,1))]) ;
    end
end
end

